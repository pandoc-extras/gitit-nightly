# This .travis.yml is modified from pandoc-nightly's at https://github.com/pandoc-extras/pandoc-nightly/blob/master/.travis.yml
language: generic
cache:
  directories:
    - $HOME/.ghc
    - $HOME/.stack
matrix:
  include:
  - sudo: false
    dist: trusty
    addons:
      apt:
        packages:
          - ghc-8.0.2
        sources:
          - hvr-ghc
  - os: osx
before_install:
  # gitit-nightly version
  - |
    printf "%s: %s\n" "gitit-nightly version" "0.2.2"
install:
  # Download and unpack the stack executable
  - mkdir -p ~/.local/bin
  - |
    if [[ `uname` = "Darwin" ]]; then
      curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
    else
      curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    fi
  - export PATH=$PATH:$HOME/.local/bin
before_script:
  # clone from git
  - git clone https://github.com/jgm/gitit
  - cd gitit
  # get the current commit hash of gitit
  - HASH=$(git rev-parse --short HEAD)
  # filename
  - |
    if [[ `uname` == "Darwin" ]]; then
      filename=gitit-osx-$HASH
    else
      filename=gitit-amd64-$HASH
    fi
script:
  # build
  - stack setup
  - stack build
  - cd ..
  # path to the gitit executable
  - path2gitit="$(find gitit/.stack-work/install -type f -iname 'gitit')"
  # debug
  - $path2gitit -v
after_success:
  # if it's a cron job, create git tag for GitHub Releases, only on Linux build
  - |
    if [[ $TRAVIS_EVENT_TYPE == 'cron' && `uname` != "Darwin" ]]; then
      git config --global user.email "builds@travis-ci.com"
      git config --global user.name "Travis CI"
      export GIT_TAG="hash-$HASH"
      git tag $GIT_TAG -a -m "Generated tag from TravisCI build $TRAVIS_BUILD_NUMBER"
      git push --quiet https://$GH_TOKEN_SECURE@github.com/pandoc-extras/gitit-nightly $GIT_TAG > /dev/null 2>&1
    fi
  # zip gitit binary and move to dist/ if it is the git-tag build (GitHub Releases)
  - |
    if [[ ! -z "$TRAVIS_TAG" ]]; then
      mkdir -p $filename
      mv $path2gitit $filename
      zip $filename.zip $filename/gitit
      mkdir -p dist
      mv $filename.zip dist/
    fi
  # debug
  - ls -l dist/
deploy:
  provider: releases
  api_key: "$GH_TOKEN_SECURE"
  file_glob: true
  file: "dist/*"
  skip_cleanup: true
  on:
    tags: true
